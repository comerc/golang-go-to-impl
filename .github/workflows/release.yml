name: Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      uses: coactions/setup-xvfb@v1
      with:
        run: npm test

    - name: Run linter
      run: npm run lint

    - name: Update version in package.json
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Extract version from tag (e.g., v1.0.0 -> 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          npm version $VERSION --no-git-tag-version
          
          # Commit updated package.json back to repository
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Update version to $VERSION [skip ci]" || exit 0
          git push origin HEAD:main
        else
          echo "Manual run - using version from package.json"
        fi

  create-artifacts:
    runs-on: ubuntu-latest
    needs: update-version
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main  # Получаем обновленную версию

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci

    - name: Package extension
      run: |
        npm install -g vsce
        vsce package

    - name: Upload VSIX to Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: "*.vsix"
        asset_name: golang-go-to-impl-${{ github.event.release.tag_name }}.vsix
        asset_content_type: application/zip

  publish-vscode:
    runs-on: ubuntu-latest
    needs: update-version
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main  # Получаем обновленную версию

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci

    - name: Publish to VS Code Marketplace
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
      run: |
        echo "Publishing to VS Code Marketplace..."
        vsce publish -p $VSCE_TOKEN

  publish-openvsx:
    runs-on: ubuntu-latest
    needs: update-version
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main  # Получаем обновленную версию

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci

    - name: Publish to OpenVSX Registry
      env:
        OVSX_TOKEN: ${{ secrets.OVSX_TOKEN }}
      run: |
        npm install -g ovsx
        echo "Publishing to OpenVSX Registry..."
        ovsx publish -p $OVSX_TOKEN